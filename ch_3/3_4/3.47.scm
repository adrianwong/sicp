(define (make-mutex)
  (let ((cell (list false)))
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire))) ; retry
            ((eq? m 'release) (clear! cell))))
    the-mutex))

; (a)
(define (make-semaphore max)
  (let ((lock (make-mutex))
        (acquired 0))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (lock 'acquire)
             (if (< acquired max)
                 (begin (set! acquired (+ acquired 1))
                        (lock 'release))
                 (begin (lock 'release)
                        (the-semaphore 'acquire))))
            ((eq? m 'release)
             (lock 'acquire)
             (set! acquired (- acquired 1))
             (lock 'release))
            (else (error "Unknown request: MAKE-SEMAPHORE" m))))
    the-semaphore))

; (b)
(define (make-semaphore max)
  (let ((cell (list false))
        (acquired 0))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-semaphore 'acquire))
             (if (< acquired max)
                 (begin (set! acquired (+ acquired 1))
                        (clear! cell))
                 (begin (clear! cell)
                        (the-semaphore 'acquire))))
            ((eq? m 'release)
             (if (test-and-set! cell)
                 (the-semaphore 'release))
             (set! acquired (- acquired 1))
             (clear! cell))
            (else (error "Unknown request: MAKE-SEMAPHORE" m))))
    the-semaphore))
