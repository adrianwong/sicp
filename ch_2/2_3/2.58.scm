; (a)
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list a1 '+ a2))))

(define (sum? x)
  (and (pair? x) (eq? (cadr x) '+)))

(define (addend s) (car s))

(define (augend s) (caddr s))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))

(define (product? x)
  (and (pair? x) (eq? (cadr x) '*)))

(define (multiplier p) (car p))

(define (multiplicand p) (caddr p))

; (b)
(define (op? token)
  (or (eq? token '+) (eq? token '*)))

(define (precedence op)
  (cond ((eq? op '+) 1)
        ((eq? op '*) 2)
        (else (error "(precedence) unknown operator"))))

(define (>precedence? o1 o2)
  (> (precedence o1) (precedence o2)))

(define (apply-op output op)
  (let ((lhs (cadr output))
        (rhs (car output)))
    (cons (cond ((eq? op '+) (make-sum lhs rhs))
                ((eq? op '*) (make-product lhs rhs))
                (else (error "(apply-op) unknown operator")))
          (cddr output))))

(define (shunting-yard exp)
  (define (iter output operators exp)
    (define (push-operator op)
      (iter output (cons op operators) (cdr exp)))
    (define (pop-operator)
      (iter (apply-op output (car operators)) (cdr operators) exp))
    (define (push-operand out)
      (iter (cons out output) operators (cdr exp)))
    (define (push-sublist sub)
      (iter (cons (shunting-yard sub) output) operators (cdr exp)))
    (if (null? exp)
        (if (null? operators)
            (car output)
            (pop-operator))
        (let ((token (car exp)))
          (cond ((list? token) (push-sublist token))
                ((op? token)
                 (if (or (null? operators)
                         (>precedence? token (car operators)))
                     (push-operator token)
                     (pop-operator)))
                (else (push-operand token))))))
  (iter '() '() exp))

(define p1 (shunting-yard '(x + 3 * (x + y + 2))))
(define p2 (shunting-yard '(x * 5 + 3 * (x + y + 2))))
(define p3 (shunting-yard (make-sum p1 p2)))

(display (deriv p1 'x))
(newline)
(display (deriv p2 'x))
(newline)
(display (deriv p3 'x))
