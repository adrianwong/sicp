(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result
               (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result
                   (partial-tree
                    (cdr non-left-elts)
                    right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts
                     (cdr right-result)))
                (cons (make-tree this-entry
                                 left-tree
                                 right-tree)
                      remaining-elts))))))))

; (a)
; The list is divided into three parts: the center element `this-entry`,
; all elements smaller than `this-entry`, and all elements larger than
; `this-entry`. A tree is created with `this-entry` as its root node, a
; `left-tree`, which is generated by passing all the smaller elements
; into a recursive call to `partial-tree`, and a `right-tree`, which is
; generated by passing all the larger elements into a recursive call to
; `partial-tree`
;
;      5
;     / \
;    /   \
;   1     9
;    \   / \
;     3 7   11

; (b)
; Order of growth is O(n), as each element in the list is visited once
; and only one operation `cons` is performed for each visit
