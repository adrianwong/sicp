(define (intersection-set set1 set2)
  (define (intersection-set-int set1 set2)
    (if (or (null? set1) (null? set2))
        '()
        (let ((x1 (car set1)) (x2 (car set2)))
          (cond ((= x1 x2)
                 (cons x1 (intersection-set-int (cdr set1)
                                                (cdr set2))))
                ((< x1 x2)
                 (intersection-set-int (cdr set1) set2))
                ((< x2 x1)
                 (intersection-set-int set1 (cdr set2)))))))
  (list->tree (intersection-set-int (tree->list-2 set1)
                                    (tree->list-2 set2))))

(define (union-set set1 set2)
  (define (union-set-int set1 set2)
    (cond ((null? set1) set2)
          ((null? set2) set1)
          (else (let ((x1 (car set1)) (x2 (car set2)))
                  (cond ((= x1 x2)
                         (cons x1 (union-set-int (cdr set1) (cdr set2))))
                        ((> x1 x2)
                         (cons x2 (union-set-int set1 (cdr set2))))
                        ((< x1 x2)
                         (cons x1 (union-set-int (cdr set1) set2))))))))
  (list->tree (union-set-int (tree->list-2 set1)
                             (tree->list-2 set2))))
