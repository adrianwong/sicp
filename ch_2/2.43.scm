(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? positions))
         (flatmap
          (lambda (new-row)
            (map (lambda (rest-of-queens)
                   (adjoin-position new-row k rest-of-queens))
                 (queen-cols (- k 1))))
          (enumerate-interval 1 board-size)))))
  (queen-cols board-size))

; By swapping the order of nested mappings in `flatmap`, (queen-cols (- k 1))
; is evaluated `board-size` times, i.e. once for each number generated by
; (enumerate-interval 1 board-size), turning a linear recursive process into
; a tree-recursive process. This results in a time complexity of O(n^n)
